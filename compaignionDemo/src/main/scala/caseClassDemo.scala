case class car(name: String, model:String){

  val carName  = name
  val modelName = model

  def printDetails(): Unit ={
    println(s"Car name is ${carName} and model of the car is ${modelName}")
  }
}


object caseClassDemo {

  def main(args: Array[String]): Unit = {

    //val bmw = new car(name = "BMW", model = 550)
    // when ever we are writing a bmw class there is no need to write new, if we want we can
    // Reason is apply( ) auto genereated for Case Class
    val bmw = car(name = "BMW", model = "550")
    bmw.printDetails()
    //bmw.name = "B.M.W" // Mutator method is not generated by default and the parameter is val by default and so we cannot change it
    //bmw.carName = "B.M.W" // This also gives you the error because it is defined with val which is immutable
    // For both the above scenarios we can change it to var and change it

    bmw match {
      case car(a,b) => println(a,b) // There is unapply method used for matching
    }
    val merc = bmw.copy(name = "Merc") // It copies the values from the previous object, It autogenerates copy method
    merc.printDetails()

    println(bmw == merc)//It autogenerates equal and hashcode methods
    println(bmw)//toString( ) is auto implemented, bmw is a object and it converts to string to show the result
  }

}
